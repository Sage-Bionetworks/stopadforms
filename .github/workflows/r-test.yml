name: testthat

on:
  push:
    branches:
      - master
      - prod
  pull_request:
    branches:
      - master
      - prod
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        
      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libharfbuzz-dev libfribidi-dev

      - name: Install R dependencies
        run: |
          install.packages('remotes')
          install.packages('devtools')
          install.packages("renv", repos = "https://cloud.r-project.org/")
          install.packages("httr", repos = "https://cloud.r-project.org/")
          remotes::install_github("Sage-Bionetworks/dccvalidator")
          source("renv/activate.R")
          renv::restore()
          remotes::install_deps(dependencies = TRUE)
          devtools::install()
        shell: Rscript {0}

      - name: Run tests
        run: |
          install.packages('testthat')
          testthat::test_dir('tests/testthat/')
        shell: Rscript {0}
        continue-on-error: true
        id: run-tests

      - name: Save test results
        if: failure()
        run: |
          echo "Tests failed" > test-results.log
        id: save-results

      - name: Post test results to PR
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            const failedTests = fs.readFileSync('test-results.log', 'utf8');
            const issueComment = context.payload.pull_request.number;
      
            if (failedTests) {
              const body = `## :x: Test failures detected in this PR\n\n\`\`\`\n${failedTests}\n\`\`\``;
              github.rest.issues.createComment({
                ...context.repo,
                issue_number: issueComment,
                body: body
              });
            }
